
import streamlit as st
import pandas as pd
from datetime import datetime
from fpdf import FPDF
import base64
import re

# Define airport groups
domestic_airports = {'ABZ', 'BHD', 'INV', 'JER', 'MAN', 'GLA', 'EDI', 'NCL'}
short_haul_airports = {
    'AMS', 'ATH', 'BCN', 'BER', 'BUD', 'CDG', 'CPH', 'DUB', 'FCO', 'FRA', 'GVA', 'HAM',
    'LIS', 'LYS', 'MAD', 'MXP', 'NCE', 'OSL', 'PRG', 'VIE', 'WAW', 'ZRH', 'AGP', 'ALC',
    'BRU', 'BRS', 'LUX', 'PMI', 'VLC', 'PSA', 'NAP', 'OTP', 'STR', 'LIN', 'KEF', 'GOT',
    'BSL', 'HAJ', 'KRK', 'RIX', 'LCA', 'IBZ', 'ATH', 'TLS'
}

# Parse the TXT file into a DataFrame
def parse_txt(txt_file, filter_option, group_option):
    content = txt_file.read().decode('utf-8')
    lines = content.splitlines()
    data = []
    for line in lines:
        if line.startswith("BA"):
            fields = re.split(r'\s{2,}', line.strip())
            if len(fields) >= 6:
                flight_no, reg, aircraft, route, std, load = fields[:6]
                load_match = re.search(r'(\d+)%', load)
                load_factor = int(load_match.group(1)) if load_match else 0
                etd_match = re.search(r'(\d{2}:\d{2})', std)
                etd = etd_match.group(1) if etd_match else ""
                destination = route[-3:]
                if destination in domestic_airports:
                    route_group = "DOMESTIC"
                elif destination in short_haul_airports:
                    route_group = "SHORT HAUL"
                else:
                    route_group = "LONG HAUL"
                if (filter_option == "All Flights" or load_factor >= 90) and                    (group_option == "All" or route_group == group_option):
                    data.append([flight_no, reg, aircraft, route, etd, f"{load_factor}%", route_group])
    df = pd.DataFrame(data, columns=["Flight No", "Reg", "Aircraft", "Route", "ETD", "Load", "Route Group"])
    df = df.sort_values(by="ETD")
    return df

# Generate a 3-page portrait PDF with BA branding
def generate_pdf(df):
    pdf = FPDF(orientation='P', unit='mm', format='A4')
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()
    pdf.set_font("Arial", 'B', 16)
    pdf.image("https://upload.wikimedia.org/wikipedia/en/thumb/a/a7/British_Airways_Logo.svg/1920px-British_Airways_Logo.svg.png", x=10, y=8, w=60)
    pdf.ln(20)
    pdf.cell(200, 10, txt="British Airways MayFly Summary", ln=True, align='C')
    pdf.set_font("Arial", size=12)
    pdf.ln(10)
    col_widths = [25, 25, 20, 35, 25, 20]
    headers = ["Flight No", "Reg", "Aircraft", "Route", "ETD", "Load"]
    for i, header in enumerate(headers):
        pdf.cell(col_widths[i], 10, header, border=1)
    pdf.ln()
    for index, row in df.iterrows():
        pdf.set_text_color(255, 0, 0) if int(row["Load"].strip('%')) > 100 else pdf.set_text_color(0, 0, 0)
        row_data = [row["Flight No"], row["Reg"], row["Aircraft"], row["Route"], row["ETD"], row["Load"]]
        for i, item in enumerate(row_data):
            pdf.cell(col_widths[i], 10, item, border=1)
        pdf.ln()
    pdf.set_text_color(0, 0, 0)
    pdf.set_y(-15)
    pdf.set_font("Arial", size=8)
    pdf.cell(0, 10, 'Confidential Â© 2025 | Generated by Nathaniel Claxton', 0, 0, 'C')
    return pdf.output(dest='S').encode('latin1')

# Streamlit App
st.set_page_config(layout="wide")
st.title("British Airways Secure MayFly Generator")
uploaded_file = st.file_uploader("Upload MAYFLY .txt file", type="txt")
filter_option = st.radio("Load Filter", ["All Flights", "Flights above 90%"])
group_option = st.radio("Route Group Filter", ["All", "DOMESTIC", "SHORT HAUL", "LONG HAUL"])

if uploaded_file is not None:
    df = parse_txt(uploaded_file, filter_option, group_option)
    st.dataframe(df)
    if not df.empty:
        pdf_data = generate_pdf(df)
        b64_pdf = base64.b64encode(pdf_data).decode('utf-8')
        href = f'<a href="data:application/pdf;base64,{b64_pdf}" download="MayFly_Summary.pdf">ðŸ“„ Download MayFly PDF</a>'
        st.markdown(href, unsafe_allow_html=True)
