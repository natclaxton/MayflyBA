import streamlit as st
import pandas as pd
import re
from datetime import datetime, timedelta
from fpdf import FPDF
import hashlib
import pytz

# === Secure Password Protection ===
def get_hashed_continue  # Skip invalid flight dataword(password):
    return hashlib.sha256(password.encode()).hexdigest()

correct_password_hash = get_hashed_password("MayFly2025!")  # Set your real password here

def check_password():
    def password_entered():
        entered_password_hash = get_hashed_password(st.session_state["password"])
        if entered_password_hash == correct_password_hash:
            st.session_state["password_correct"] = True
            del st.session_state["password"]
        else:
            st.session_state["password_correct"] = False

    if "password_correct" not in st.session_state:
        st.text_input("Enter password:", type="password", on_change=password_entered, key="password")
        return False
    elif not st.session_state["password_correct"]:
        st.text_input("Enter password:", type="password", on_change=password_entered, key="password")
        st.error("ðŸ˜• Password incorrect. Try again.")
        return False
    else:
        return True

if not check_password():
    st.stop()

# === Main App ===

BA_BLUE = (0, 32, 91)
LIGHT_RED = (255, 204, 204)

class BA_PDF(FPDF):
    def __init__(self, date_str, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.date_str = date_str

    def header(self):
        self.set_fill_color(*BA_BLUE)
        self.set_text_color(255, 255, 255)
        self.set_font('Arial', 'B', 14)
        self.cell(0, 10, f'MayFly {self.date_str} - British Airways', ln=True, align='C', fill=True)
        self.ln(5)

    def footer(self):
        self.set_y(-12)
        self.set_font('Arial', 'I', 8)
        self.set_text_color(100)
        self.cell(0, 8, 'Confidential Â© 2025  |  Generated by British Airways', 0, 0, 'C')

    def flight_table(self, data):
        headers = ['Flight No', 'Aircraft', 'Route', 'ETD (Local)', 'Conformance', 'Load']
        widths = [30, 25, 30, 30, 30, 20]

        self.set_font('Arial', 'B', 8.5)
        self.set_fill_color(*BA_BLUE)
        self.set_text_color(255, 255, 255)
        for i in range(len(headers)):
            self.cell(widths[i], 6, headers[i], 1, 0, 'C', True)
        self.ln()

        self.set_font('Arial', '', 7.5)
        self.set_text_color(0)
        for _, row in data.iterrows():
            for i, key in enumerate(["Flight Number", "Aircraft Type", "Route", "ETD Local", "Conformance Time", "Load Factor"]):
                if key == "Load Factor" and int(row[key].rstrip('%')) > 100:
                    self.set_fill_color(*LIGHT_RED)
                else:
                    self.set_fill_color(255, 255, 255)
                self.cell(widths[i], 6, row[key], 1, 0, 'C', True)
            self.ln()

def parse_txt(file_content, filter_type, group_type):
    lines = file_content.strip().split('\n')
    flights = []
    uk_tz = pytz.timezone("Europe/London")
    utc_tz = pytz.utc

    domestic = {"ABZ", "BHD", "EDI", "GLA", "INV", "JER", "MAN", "NCL"}
    short_haul = {
        "AMS", "ATH", "BCN", "BER", "BLL", "BLQ", "BUD", "CDG", "CPH", "DUB", "DUS", "EDI", "FAO",
        "FCO", "FRA", "GIB", "GLA", "GOT", "GVA", "HAJ", "HAM", "IST", "JER", "KEF", "LCA", "LIN",
        "LIS", "LYS", "MAD", "MAN", "MRS", "MUC", "MXP", "NAP", "NCE", "OSL", "OTP", "PMI", "PRG",
        "PSA", "RAK", "RIX", "SOF", "STR", "TIA", "TLS", "VCE", "VIE", "WAW", "ZAG", "ZRH"
    }

    i = 0
    while i < len(lines):
        if lines[i].startswith("BA"):
            try:
                etd_combined = datetime.combine(selected_date, datetime.strptime(etd_utc_str, "%H:%M").time())
                etd_utc = utc_tz.localize(etd_combined)
                    etd_utc = utc_tz.localize(etd_utc)
                    etd_local = etd_utc.astimezone(uk_tz)

                    conformance_time = (etd_local - timedelta(minutes=35)).strftime("%H:%M")

                    if dest in domestic:
                        category = "DOMESTIC"
                    elif dest in short_haul:
                        category = "SHORT HAUL"
                    else:
                        category = "LONG HAUL"

                    flights.append({
                        "Flight Number": flight_no,
                        "Aircraft Type": aircraft_type,
                        "Route": route,
                        "ETD": etd_utc_str + "z",
                        "ETD Local": etd_local.strftime("%H:%M"),
                        "Conformance Time": conformance_time,
                        "Load Factor": f"{load}%",
                        "Load Factor Numeric": load,
                        "Category": category
                    })
            except Exception as e:
                pass
        i += 1

    df = pd.DataFrame(flights)

    if not df.empty:
        if filter_type == "Flights above 90%":
            df = df[df["Load Factor Numeric"] >= 90]
        if group_type != "All":
            df = df[df["Category"] == group_type]
        df = df.sort_values(by="ETD Local")

    return df

st.set_page_config(page_title="British Airways MayFly Generator", page_icon="")
st.title("British Airways MayFly PDF Generator")

selected_date = st.date_input("Select MayFly Date", datetime.today())
date_str = selected_date.strftime("%d %B")

# === Filters Section ===
col1, col2 = st.columns(2)
with col1:
    # === Filters Section ===
col1, col2 = st.columns(2)
with col1:
    filter_option = st.radio("Choose Load Filter", ["All Flights", "Flights above 90%"])
with col2:
    group_option = st.radio("Choose Route Group", ["All", "DOMESTIC", "SHORT HAUL", "LONG HAUL"])
with col2:
    group_option = st.radio("Choose Route Group", ["All", "DOMESTIC", "SHORT HAUL", "LONG HAUL"])
group_option = st.radio("Choose Route Group", ["All", "DOMESTIC", "SHORT HAUL", "LONG HAUL"])
group_option = st.radio("Choose Route Group", ["All", "DOMESTIC", "SHORT HAUL", "LONG HAUL"])

st.markdown("### Paste your MayFly data below")
text_input = st.text_area("Paste .txt contents here")

if text_input:
    flights_df = parse_txt(text_input, filter_option, group_option)

    if not flights_df.empty:
        st.success(f"Processed {len(flights_df)} flights ({filter_option} | {group_option}).")

        pdf = BA_PDF(date_str, orientation='P', unit='mm', format='A4')
        pdf.set_auto_page_break(auto=True, margin=10)
        pdf.add_page()
        pdf.flight_table(flights_df)

        pdf_output_path = "/tmp/BA_MayFly_Output.pdf"
        pdf.output(pdf_output_path)

        with open(pdf_output_path, "rb") as file:
            st.download_button(
                label="Download MayFly PDF",
                data=file,
                file_name=f"BA_MayFly_{date_str.replace(' ', '_')}.pdf",
                mime="application/pdf"
            )

        st.info("Footer: Confidential Â© 2025 | British Airways")
    else:
        st.error("No valid flights found with current filter. Please check your pasted data.")
