from fpdf import FPDF
import streamlit as st
from datetime import datetime
import pytz

# Define BA's Domestic Route Codes (UK & Ireland)
domestic_airports = {'ABZ', 'BHD', 'EDI', 'GLA', 'INV', 'JER', 'MAN', 'NCL'}

# Set up Streamlit UI
st.title("British Airways MayFly PDF Generator")

date = st.date_input("Select MayFly Date", datetime.now())
filter_option = st.radio("Choose Filter", ("All Flights", "Flights above 90%", "Domestic Flights"))
mayfly_data = st.text_area("Paste your MayFly data below", height=300)

# PDF setup
class PDF(FPDF):
    def header(self):
        self.set_font('Arial', 'B', 16)
        self.cell(0, 10, 'British Airways MayFly Report', ln=True, align='C')
        self.set_font('Arial', '', 12)
        self.cell(0, 10, f'Date: {date.strftime("%Y-%m-%d")}', ln=True, align='C')
        self.ln(10)

    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, 'Confidential Â© 2025 | Generated by Nathaniel Claxton', 0, 0, 'C')

    def flight_table(self, flights):
        self.set_font('Arial', '', 10)
        for flight in flights:
            load = flight.get('load_factor', 0)
            route = flight.get('route', 'N/A')
            etd = flight.get('etd', 'N/A')
            status = flight.get('status', 'Unknown')
            
            if load >= 100:
                self.set_text_color(255, 0, 0)
            else:
                self.set_text_color(0, 0, 0)
            
            self.cell(0, 10, f"{etd} | {route} | {load}% | {status}", ln=True)

def parse_data(text):
    lines = text.splitlines()
    flights = []
    flight = {}
    for line in lines:
        line = line.strip()
        if line.startswith("BA"):
            flight['route'] = line
        elif '%' in line:
            try:
                flight['load_factor'] = int(line.split('%')[0])
            except:
                flight['load_factor'] = 0
            flight['status'] = line.split('%')[-1].split(":")[-1].strip()
        elif ':' in line and 'May' in line:
            flight['etd'] = line.split('-')[-1].strip()
        elif line.startswith("G-") or line.startswith("GZ") or len(line) == 6:
            flight['reg'] = line
        elif line == "":
            if 'route' in flight:
                flights.append(flight)
            flight = {}
    if flight and 'route' in flight:
        flights.append(flight)
    return flights

def filter_flights(flights, option):
    if option == "Flights above 90%":
        return [f for f in flights if f.get('load_factor', 0) > 90]
    elif option == "Domestic Flights":
        return [f for f in flights if f.get('route', '')[3:6] in domestic_airports]
    return flights

if mayfly_data:
    flights = parse_data(mayfly_data)
    filtered = filter_flights(flights, filter_option)

    if filtered:
        pdf = PDF()
        pdf.add_page()
        pdf.flight_table(filtered)

        pdf_output = f"MayFly_{date.strftime('%Y%m%d')}.pdf"
        pdf.output(pdf_output)

        with open(pdf_output, "rb") as file:
            st.download_button("Download PDF", data=file, file_name=pdf_output, mime='application/pdf')
    else:
        st.error("No valid flights found with current filter. Please check your pasted data.")
